دانشگاه   ,رشته,   مقطع ,  ظرفیت
تهران   ,مهندسی پزشکی   ,کارشناسی   ,60
شریف,برق,کارشناسی,120
فردوسی,حقوق,کارشناسی,80
علوم پزشکی تهران,پزشکی,کارشناسی,100


sk-878bd604f2a94f5680306bd8a155c978


























عالیه! دقیقاً هدف شما اینه که با استفاده از DeepSeek یا مدل زبان بزرگ (LLM)، کاری کنید که بات فقط از دیتاست داخلی خودتون جواب بده — نه از وب، نه از دیتای خودش.
این دقیقاً همون چیزیه که در حوزه هوش مصنوعی بهش می‌گن:
________________________________________
✅ RAG (Retrieval-Augmented Generation)
یا همون:
"پاسخ‌سازی تقویت‌شده با بازیابی اطلاعات"
________________________________________
🧠 ایده‌ی کار:
مدل LLM مثل DeepSeek دانش کلی داره، ولی دیتای خاص شما (مثلاً اطلاعات دانشگاه‌ها) رو نداره. پس:
گام‌ها:
1.	👂 کاربر سؤال می‌پرسه (مثلاً: «دانشگاه تهران مهندسی پزشکی داره؟»)
2.	🧲 شما دیتاستتون (مثلاً CSV یا پایگاه‌داده SQLite) رو جستجو می‌کنید.
3.	📦 اطلاعات مرتبط از دیتاست بیرون کشیده می‌شه (مثلاً لیست رشته‌های دانشگاه تهران).
4.	✉️ این اطلاعات + سوال کاربر به صورت یک پرامپت سفارشی برای DeepSeek فرستاده می‌شه.
5.	🤖 DeepSeek بر اساس این زمینه اختصاصی (context)، پاسخ طبیعی تولید می‌کنه.
________________________________________
🧱 ابزارهایی که نیاز داری:
ابزار	کاربرد
FastAPI	API چت‌بات
httpx	تماس با DeepSeek
pandas یا sqlite3	جستجو در دیتاست خودت
(اختیاری) sentence-transformers	اگر بخوای جستجوی معنایی انجام بدی
________________________________________
📦 ساختار پروژه پیشنهادی
chatbot_rag/
├── main.py                # API FastAPI
├── deepseek_client.py     # اتصال به DeepSeek
├── data/universities.csv  # دیتاست شما
________________________________________
🔧 مرحله ۱: دیتاست فرضی (CSV)
data/universities.csv
دانشگاه,رشته,مقطع,ظرفیت
تهران,مهندسی پزشکی,کارشناسی,60
شریف,برق,کارشناسی,120
فردوسی,حقوق,کارشناسی,80
علوم پزشکی تهران,پزشکی,کارشناسی,100
________________________________________
🔧 مرحله ۲: deepseek_client.py — اتصال به DeepSeek
import httpx
import os

DEESEEK_API_KEY = os.getenv("DEESEEK_API_KEY", "your_deepseek_key")
DEESEEK_API_URL = "https://api.deepseek.example.com/v1/completions"

async def ask_deepseek(question: str, context: str) -> str:
    prompt = f"""شما یک دستیار انتخاب رشته هستید. فقط با استفاده از اطلاعات زیر به سوال پاسخ دهید:

اطلاعات:
{context}

سوال:
{question}

پاسخ دقیق و کوتاه بر اساس اطلاعات بالا بده.
"""

    headers = {
        "Authorization": f"Bearer {DEESEEK_API_KEY}",
        "Content-Type": "application/json",
    }

    data = {
        "model": "deepseek-chat",  # یا نام مدل دقیق
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(DEESEEK_API_URL, json=data, headers=headers)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]
________________________________________
🔧 مرحله ۳: main.py — FastAPI + جستجو در دیتاست
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import pandas as pd
from deepseek_client import ask_deepseek

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# بارگذاری دیتاست
df = pd.read_csv("data/universities.csv")

class ChatInput(BaseModel):
    message: str

@app.post("/chat")
async def chat(data: ChatInput):
    user_question = data.message

    # استخراج کلمات کلیدی (خیلی ساده – می‌شه بهتر کرد)
    matches = df[df.apply(lambda row: any(word in user_question for word in row.values.astype(str)), axis=1)]

    if matches.empty:
        context = "هیچ اطلاعات مرتبطی در دیتاست یافت نشد."
    else:
        context = matches.to_string(index=False)

    # فرستادن سوال + context به DeepSeek
    answer = await ask_deepseek(user_question, context)
    return {"reply": answer}
________________________________________
🧪 تست
مثلاً کاربر بپرسه:
دانشگاه تهران مهندسی پزشکی داره؟
مدل DeepSeek (با context زیر):
دانشگاه          رشته            مقطع     ظرفیت
تهران          مهندسی پزشکی     کارشناسی   60
پاسخ می‌ده:
بله، دانشگاه تهران در مقطع کارشناسی رشته مهندسی پزشکی دارد و ظرفیت آن ۶۰ نفر است.
________________________________________
✅ مزایای این روش:
•	فقط از دیتای خودت جواب می‌ده
•	پاسخ طبیعی و روان با کمک مدل DeepSeek
•	می‌تونی دیتات رو هر لحظه آپدیت کنی
•	کاملاً قابل کنترل (محدود به دامنه خاص)
________________________________________
✍️ مرحله بعد؟
اگه موافقی، من می‌تونم:
1.	یه پروژه آماده برات بسازم که فقط uvicorn main:app --reload رو بزنی و کار کنه.
2.	کدی بنویسم که دیتات رو به شکل حرفه‌ای‌تر ایندکس کنه (مثلاً جستجوی معنایی).
________________________________________
آیا دیتاستت رو داری الان؟
می‌تونی یه نمونه بفرستی (یا فقط فرمتش رو بگی) تا کاملش کنم.

